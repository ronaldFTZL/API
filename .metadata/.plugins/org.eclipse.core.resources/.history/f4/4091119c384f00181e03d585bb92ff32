package com.example.webapi.ws.controller;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.webapi.ws.model.TotalControleDeLancamento;
import com.example.webapi.ws.model.Extrato;
import com.example.webapi.ws.model.LancamentoContaCorreteCliente;

@RestController
public class TotalControleDeLancamentoController {

	Map<Integer, Extrato> extratos = new HashMap<>();;
	Integer proximoId = 1;

	private Extrato cadastrar(Extrato extrato) {

		extrato.setId(proximoId);

		proximoId++;

		extratos.put(extrato.getId(), extrato);
		return extrato;
	}

	private Collection<Extrato> buscarTodos() {

		return extratos.values();
	}

	public void excluir(Extrato extrato) {
		extratos.remove(extrato.getId());
	}

	private Extrato buscarPorID(Integer id) {

		return extratos.get(id);
	}

	public Extrato alterar(Extrato extrato) {
		extratos.put(extrato.getId(), extrato);
		return extrato;
	}

	// End points

	/*
	 * forma simplificada
	 * 
	 * @PostMapping(value = "/lancamento") public TotalControleDeLancamento
	 * adiciona(@RequestBody TotalControleDeLancamento lancamento) { return
	 * lancamento; }
	 */

	@RequestMapping(method = RequestMethod.POST, value = "/lancamentos") // , consumes =org.springframework.http.MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Extrato> cadastrarLancamento(@RequestBody Extrato extrato) {
		Extrato novoextrato = cadastrar(extrato);

		// validando o metodo no console System.out.println("Cadastrou");

		return new ResponseEntity<>(novoextrato, HttpStatus.CREATED);
	}

	@GetMapping(value = "/lancamentos")
	public ResponseEntity<Collection<Extrato>> buscarTodosLancamentos(
			@RequestBody Extrato extrato) {

		Collection<Extrato> extratosbuscados = buscarTodos();

		// teste no console System.out.println("Retornou");

		return new ResponseEntity<>(extratosbuscados, HttpStatus.OK);

	}

	/*@DeleteMapping(value = "/lancamentos/{id}")
	public ResponseEntity<Extrato> excluirLancamento(@PathVariable Integer id) {

		Extrato extrato = buscarPorID(id);

		if (ExtratoEncontrado == null) {

			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		excluir(extratoEncontrado);
		// validacao no console System.out.println("Excluiu");
		return new ResponseEntity<>(HttpStatus.OK);
	}*/

	@PutMapping(value = "/lancamentos") // consumes = org.springframework.http.MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Extrato> alterarLancamento(
			@RequestBody Extrato extrato) {

		/*
		 * validar antes de alterar e retornar o mesmo na tela TotalControleDeLancamento
		 * lancamentoencontrado = buscarPorID(lancamento.getId());
		 * if(lancamentoEncontrador==null) { return new
		 * ResponseEntity<TotalControleDeLancamentos>(HttpStatus.NOT_FOUND); }
		 */
		Extrato extratoAlterado = alterar(extrato);
		// valida no console System.out.println("Alterou");
		return new ResponseEntity<>(extratoAlterado, HttpStatus.OK);
	}

}
