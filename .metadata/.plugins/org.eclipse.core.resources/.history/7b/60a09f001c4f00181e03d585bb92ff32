package com.example.webapi.ws.controller;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.webapi.ws.model.Aluno;
import com.example.webapi.ws.model.TotalControleDeLancamento;
import com.example.webapi.ws.model.lancamentoContaCorreteCliente;

@RestController
public class TotalControleDeLancamentoController {

	Map<Integer, TotalControleDeLancamento> lancamentos = new HashMap<>();;
	Integer proximoId = 1;

	private TotalControleDeLancamento cadastrar(TotalControleDeLancamento lancamento) {

		lancamento.setId(proximoId);

		proximoId++;

		lancamentos.put(lancamento.getId(), lancamento);
		return lancamento;
	}

	private Collection<TotalControleDeLancamento> buscarTodas() {

		return lancamentos.values();
	}

	public void excluir(TotalControleDeLancamento lancamento) {
		lancamentos.remove(lancamento.getId());
	}

	private TotalControleDeLancamento buscarPorID(Integer id) {

		return lancamentos.get(id);
	}

	public TotalControleDeLancamento alterar(TotalControleDeLancamento lancamento) {
		lancamentos.put(lancamento.getId(), lancamento);
		return lancamento;
	}

	// End points
	/*forma simplificada
	@PostMapping(value = "/lancamento")
	public TotalControleDeLancamento adiciona(@RequestBody TotalControleDeLancamento lancamento) {
		return lancamento;
	}
	*/
	
	@RequestMapping(method = RequestMethod.POST, value = "/lancamento")//, consumes = org.springframework.http.MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<TotalControleDeLancamento> cadastrarLancamento(@RequestBody TotalControleDeLancamento lancamento) {
		TotalControleDeLancamento novolancamento = cadastrar(lancamento);
		
		// validando o metodo no console System.out.println("Cadastrou");
		
		return new ResponseEntity<>(novolancamento, HttpStatus.CREATED);
	}

	@RequestMapping(method = RequestMethod.GET, value = "/contas", produces = org.springframework.http.MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Collection<Conta>> buscarTodasContas(@RequestBody Conta conta) {
		Collection<Conta> contasBuscadas = buscarTodas();

		System.out.println("Retornou");
		return new ResponseEntity<>(contasBuscadas, HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.DELETE, value = "/contas/{id}")
	public ResponseEntity<Conta> excluirConta(@PathVariable Integer id) {

		Conta contaEncontrada = buscarPorID(id);

		if (contaEncontrada == null) {

			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
		excluir(contaEncontrada);
		System.out.println("Excluiu");
		return new ResponseEntity<>(HttpStatus.OK);
	}

	@RequestMapping(method = RequestMethod.PUT, value = "/contas", consumes = org.springframework.http.MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Conta> alterarConta(@RequestBody Conta conta) {

		/*
		 * Conta contaEncontrada = buscarPorID(conta.getId()); if(contaEncontrada==null)
		 * { return new ResponseEntity<Conta>(HttpStatus.NOT_FOUND); }
		 */
		Conta contaalterada = alterar(conta);
		System.out.println("Alterou");
		return new ResponseEntity<>(contaalterada, HttpStatus.OK);
	}

}
	
	
}
